FILE: innerTypes.kt
    public final class Outer<T> : R|kotlin/Any| {
        public constructor<T>(): R|Outer<T>| {
            super<R|kotlin/Any|>()
        }

        public final inner class Inner<T, K> : R|kotlin/Any| {
            public constructor<K>(): R|Outer.Inner<T, K>| {
                super<R|kotlin/Any|>()
            }

        }

    }
    public final class Boxed<Q> : R|kotlin/Any| {
        public constructor<Q>(): R|Boxed<Q>| {
            super<R|kotlin/Any|>()
        }

        public final fun substitute(): R|Outer.Inner<Q, kotlin/Int>| {
            ^substitute R|/Outer.Outer|<R|Q|>().R|/Outer.Inner.Inner|<R|kotlin/Int|>()
        }

    }
    public final fun accept(p: R|Outer.Inner<kotlin/String, kotlin/Int>|): R|kotlin/Unit| {
    }
    public final val rr: R|Outer.Inner<kotlin/String, kotlin/Int>| = R|/Outer.Outer|<R|kotlin/String|>().R|/Outer.Inner.Inner|<R|kotlin/Int|>()
        public get(): R|Outer.Inner<kotlin/String, kotlin/Int>|
    public final val rrq: R|Outer.Inner<kotlin/String, kotlin/Int>| = R|/Boxed.Boxed|<R|kotlin/String|>().R|FakeOverride</Boxed.substitute: R|Outer.Inner<kotlin/String, kotlin/Int>|>|()
        public get(): R|Outer.Inner<kotlin/String, kotlin/Int>|
    public final fun check(): R|kotlin/Unit| {
        <Inapplicable(INAPPLICABLE): [/accept]>#(R|/Outer.Outer|<R|kotlin/Int|>().R|/Outer.Inner.Inner|<R|kotlin/Int|>())
        <Inapplicable(INAPPLICABLE): [/accept]>#(R|/Outer.Outer|<R|kotlin/String|>().R|/Outer.Inner.Inner|<R|kotlin/String|>())
        R|/accept|(R|/Outer.Outer|<R|kotlin/String|>().R|/Outer.Inner.Inner|<R|kotlin/Int|>())
        <Inapplicable(INAPPLICABLE): [/accept]>#(R|/Boxed.Boxed|<R|kotlin/Int|>().R|FakeOverride</Boxed.substitute: R|Outer.Inner<kotlin/Int, kotlin/Int>|>|())
        R|/accept|(R|/Boxed.Boxed|<R|kotlin/String|>().R|FakeOverride</Boxed.substitute: R|Outer.Inner<kotlin/String, kotlin/Int>|>|())
    }
