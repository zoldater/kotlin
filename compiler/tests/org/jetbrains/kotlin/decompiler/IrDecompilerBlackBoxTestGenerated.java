/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.decompiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/decompiler/box")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IrDecompilerBlackBoxTestGenerated extends AbstractIrDecompilerBlackBoxTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
    }

    public void testAllFilesPresentInBox() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("dummy.kt")
    public void testDummy() throws Exception {
        runTest("compiler/testData/decompiler/box/dummy.kt");
    }

    @TestMetadata("javaEnum.kt")
    public void testJavaEnum() throws Exception {
        runTest("compiler/testData/decompiler/box/javaEnum.kt");
    }

    @TestMetadata("compiler/testData/decompiler/box/casts")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Casts extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInCasts() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/casts"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("as.kt")
        public void testAs() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/as.kt");
        }

        @TestMetadata("asForConstants.kt")
        public void testAsForConstants() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asForConstants.kt");
        }

        @TestMetadata("asSafe.kt")
        public void testAsSafe() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asSafe.kt");
        }

        @TestMetadata("asSafeFail.kt")
        public void testAsSafeFail() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asSafeFail.kt");
        }

        @TestMetadata("asSafeForConstants.kt")
        public void testAsSafeForConstants() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asSafeForConstants.kt");
        }

        @TestMetadata("asSafeForConstants.decompiled.kt")
        public void testAsSafeForConstants_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asSafeForConstants.decompiled.kt");
        }

        @TestMetadata("asSafe.decompiled.kt")
        public void testAsSafe_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asSafe.decompiled.kt");
        }

        @TestMetadata("asThrowsNpe_1_4.kt")
        public void testAsThrowsNpe_1_4() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asThrowsNpe_1_4.kt");
        }

        @TestMetadata("asUnit.kt")
        public void testAsUnit() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asUnit.kt");
        }

        @TestMetadata("asWithGeneric.kt")
        public void testAsWithGeneric() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/asWithGeneric.kt");
        }

        @TestMetadata("as.decompiled.kt")
        public void testAs_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/as.decompiled.kt");
        }

        @TestMetadata("castGenericNull.kt")
        public void testCastGenericNull() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/castGenericNull.kt");
        }

        @TestMetadata("intersectionTypeMultipleBounds.kt")
        public void testIntersectionTypeMultipleBounds() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeMultipleBounds.kt");
        }

        @TestMetadata("intersectionTypeMultipleBoundsImplicitReceiver.kt")
        public void testIntersectionTypeMultipleBoundsImplicitReceiver() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeMultipleBoundsImplicitReceiver.kt");
        }

        @TestMetadata("intersectionTypeMultipleBoundsImplicitReceiver.decompiled.kt")
        public void testIntersectionTypeMultipleBoundsImplicitReceiver_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeMultipleBoundsImplicitReceiver.decompiled.kt");
        }

        @TestMetadata("intersectionTypeMultipleBounds.decompiled.kt")
        public void testIntersectionTypeMultipleBounds_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeMultipleBounds.decompiled.kt");
        }

        @TestMetadata("intersectionTypeSmartcast.kt")
        public void testIntersectionTypeSmartcast() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeSmartcast.kt");
        }

        @TestMetadata("intersectionTypeWithMultipleBoundsAsReceiver.kt")
        public void testIntersectionTypeWithMultipleBoundsAsReceiver() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeWithMultipleBoundsAsReceiver.kt");
        }

        @TestMetadata("intersectionTypeWithMultipleBoundsAsReceiver.decompiled.kt")
        public void testIntersectionTypeWithMultipleBoundsAsReceiver_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeWithMultipleBoundsAsReceiver.decompiled.kt");
        }

        @TestMetadata("intersectionTypeWithoutGenericsAsReceiver.kt")
        public void testIntersectionTypeWithoutGenericsAsReceiver() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeWithoutGenericsAsReceiver.kt");
        }

        @TestMetadata("intersectionTypeWithoutGenericsAsReceiver.decompiled.kt")
        public void testIntersectionTypeWithoutGenericsAsReceiver_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/intersectionTypeWithoutGenericsAsReceiver.decompiled.kt");
        }

        @TestMetadata("is.kt")
        public void testIs() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/is.kt");
        }

        @TestMetadata("isNullablePrimitive.kt")
        public void testIsNullablePrimitive() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/isNullablePrimitive.kt");
        }

        @TestMetadata("isNullablePrimitive.decompiled.kt")
        public void testIsNullablePrimitive_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/isNullablePrimitive.decompiled.kt");
        }

        @TestMetadata("is.decompiled.kt")
        public void testIs_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/is.decompiled.kt");
        }

        @TestMetadata("kt22714.kt")
        public void testKt22714() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/kt22714.kt");
        }

        @TestMetadata("lambdaToUnitCast.kt")
        public void testLambdaToUnitCast() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/lambdaToUnitCast.kt");
        }

        @TestMetadata("notIs.kt")
        public void testNotIs() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/notIs.kt");
        }

        @TestMetadata("notIs.decompiled.kt")
        public void testNotIs_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/notIs.decompiled.kt");
        }

        @TestMetadata("unitAsAny.kt")
        public void testUnitAsAny() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/unitAsAny.kt");
        }

        @TestMetadata("unitAsInt.kt")
        public void testUnitAsInt() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/unitAsInt.kt");
        }

        @TestMetadata("unitAsInt.decompiled.kt")
        public void testUnitAsInt_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/unitAsInt.decompiled.kt");
        }

        @TestMetadata("unitAsSafeAny.kt")
        public void testUnitAsSafeAny() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/unitAsSafeAny.kt");
        }

        @TestMetadata("unitNullableCast.kt")
        public void testUnitNullableCast() throws Exception {
            runTest("compiler/testData/decompiler/box/casts/unitNullableCast.kt");
        }

        @TestMetadata("compiler/testData/decompiler/box/casts/functions")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Functions extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInFunctions() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/casts/functions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("asFunKBig.kt")
            public void testAsFunKBig() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/asFunKBig.kt");
            }

            @TestMetadata("asFunKSmall.kt")
            public void testAsFunKSmall() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/asFunKSmall.kt");
            }

            @TestMetadata("isFunKBig.kt")
            public void testIsFunKBig() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/isFunKBig.kt");
            }

            @TestMetadata("isFunKSmall.kt")
            public void testIsFunKSmall() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/isFunKSmall.kt");
            }

            @TestMetadata("javaTypeIsFunK.kt")
            public void testJavaTypeIsFunK() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/javaTypeIsFunK.kt");
            }

            @TestMetadata("reifiedAsFunKBig.kt")
            public void testReifiedAsFunKBig() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedAsFunKBig.kt");
            }

            @TestMetadata("reifiedAsFunKSmall.kt")
            public void testReifiedAsFunKSmall() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedAsFunKSmall.kt");
            }

            @TestMetadata("reifiedAsFunKSmall.decompiled.kt")
            public void testReifiedAsFunKSmall_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedAsFunKSmall.decompiled.kt");
            }

            @TestMetadata("reifiedIsFunKBig.kt")
            public void testReifiedIsFunKBig() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedIsFunKBig.kt");
            }

            @TestMetadata("reifiedIsFunKSmall.kt")
            public void testReifiedIsFunKSmall() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedIsFunKSmall.kt");
            }

            @TestMetadata("reifiedSafeAsFunKBig.kt")
            public void testReifiedSafeAsFunKBig() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedSafeAsFunKBig.kt");
            }

            @TestMetadata("reifiedSafeAsFunKBig.decompiled.kt")
            public void testReifiedSafeAsFunKBig_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedSafeAsFunKBig.decompiled.kt");
            }

            @TestMetadata("reifiedSafeAsFunKSmall.kt")
            public void testReifiedSafeAsFunKSmall() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedSafeAsFunKSmall.kt");
            }

            @TestMetadata("reifiedSafeAsFunKSmall.decompiled.kt")
            public void testReifiedSafeAsFunKSmall_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/reifiedSafeAsFunKSmall.decompiled.kt");
            }

            @TestMetadata("safeAsFunKBig.kt")
            public void testSafeAsFunKBig() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/safeAsFunKBig.kt");
            }

            @TestMetadata("safeAsFunKSmall.kt")
            public void testSafeAsFunKSmall() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/functions/safeAsFunKSmall.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class LiteralExpressionAsGenericArgument extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInLiteralExpressionAsGenericArgument() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("binaryExpressionCast.kt")
            public void testBinaryExpressionCast() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/binaryExpressionCast.kt");
            }

            @TestMetadata("javaBox.kt")
            public void testJavaBox() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/javaBox.kt");
            }

            @TestMetadata("javaBox.decompiled.kt")
            public void testJavaBox_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/javaBox.decompiled.kt");
            }

            @TestMetadata("labeledExpressionCast.kt")
            public void testLabeledExpressionCast() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/labeledExpressionCast.kt");
            }

            @TestMetadata("parenthesizedExpressionCast.kt")
            public void testParenthesizedExpressionCast() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/parenthesizedExpressionCast.kt");
            }

            @TestMetadata("parenthesizedExpressionCast.decompiled.kt")
            public void testParenthesizedExpressionCast_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/parenthesizedExpressionCast.decompiled.kt");
            }

            @TestMetadata("superConstructor.kt")
            public void testSuperConstructor() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/superConstructor.kt");
            }

            @TestMetadata("superConstructor.decompiled.kt")
            public void testSuperConstructor_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/superConstructor.decompiled.kt");
            }

            @TestMetadata("unaryExpressionCast.kt")
            public void testUnaryExpressionCast() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/unaryExpressionCast.kt");
            }

            @TestMetadata("unaryExpressionCast.decompiled.kt")
            public void testUnaryExpressionCast_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/unaryExpressionCast.decompiled.kt");
            }

            @TestMetadata("vararg.kt")
            public void testVararg() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/vararg.kt");
            }

            @TestMetadata("vararg.decompiled.kt")
            public void testVararg_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/literalExpressionAsGenericArgument/vararg.decompiled.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/casts/mutableCollections")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class MutableCollections extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInMutableCollections() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/casts/mutableCollections"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("asWithMutable.kt")
            public void testAsWithMutable() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/mutableCollections/asWithMutable.kt");
            }

            @TestMetadata("isWithMutable.kt")
            public void testIsWithMutable() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/mutableCollections/isWithMutable.kt");
            }

            @TestMetadata("mutabilityMarkerInterfaces.kt")
            public void testMutabilityMarkerInterfaces() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/mutableCollections/mutabilityMarkerInterfaces.kt");
            }

            @TestMetadata("reifiedAsWithMutable.kt")
            public void testReifiedAsWithMutable() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/mutableCollections/reifiedAsWithMutable.kt");
            }

            @TestMetadata("reifiedIsWithMutable.kt")
            public void testReifiedIsWithMutable() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/mutableCollections/reifiedIsWithMutable.kt");
            }

            @TestMetadata("reifiedSafeAsWithMutable.kt")
            public void testReifiedSafeAsWithMutable() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/mutableCollections/reifiedSafeAsWithMutable.kt");
            }

            @TestMetadata("safeAsWithMutable.kt")
            public void testSafeAsWithMutable() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/mutableCollections/safeAsWithMutable.kt");
            }

            @TestMetadata("weirdMutableCasts.kt")
            public void testWeirdMutableCasts() throws Exception {
                runTest("compiler/testData/decompiler/box/casts/mutableCollections/weirdMutableCasts.kt");
            }
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/classes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Classes extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classes_simple.kt")
        public void testClasses_simple() throws Exception {
            runTest("compiler/testData/decompiler/box/classes/classes_simple.kt");
        }

        @TestMetadata("enum_test.kt")
        public void testEnum_test() throws Exception {
            runTest("compiler/testData/decompiler/box/classes/enum_test.kt");
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/ctor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Ctor extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInCtor() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/ctor"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("default_param_ctor.kt")
            public void testDefault_param_ctor() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/ctor/default_param_ctor.kt");
            }

            @TestMetadata("instance_ctor.kt")
            public void testInstance_ctor() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/ctor/instance_ctor.kt");
            }

            @TestMetadata("instance_different_ctors.kt")
            public void testInstance_different_ctors() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/ctor/instance_different_ctors.kt");
            }

            @TestMetadata("named_params_ctor.kt")
            public void testNamed_params_ctor() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/ctor/named_params_ctor.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/data_class")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Data_class extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInData_class() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/data_class"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("data_class.kt")
            public void testData_class() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/data_class/data_class.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/delegating_calls")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Delegating_calls extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInDelegating_calls() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/delegating_calls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("super_this_calls.kt")
            public void testSuper_this_calls() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/delegating_calls/super_this_calls.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/extension")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Extension extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInExtension() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/extension"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("custom_type_extension.kt")
            public void testCustom_type_extension() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/extension/custom_type_extension.kt");
            }

            @TestMetadata("kt_type_extension.kt")
            public void testKt_type_extension() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/extension/kt_type_extension.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/inheritance")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inheritance extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInInheritance() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/inheritance"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("inherit_and_implement.kt")
            public void testInherit_and_implement() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/inheritance/inherit_and_implement.kt");
            }

            @TestMetadata("inherit_primary_ctor_noargs.kt")
            public void testInherit_primary_ctor_noargs() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/inheritance/inherit_primary_ctor_noargs.kt");
            }

            @TestMetadata("inherit_primary_ctor_wargs.kt")
            public void testInherit_primary_ctor_wargs() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/inheritance/inherit_primary_ctor_wargs.kt");
            }

            @TestMetadata("inherit_secondary_ctor_wargs.kt")
            public void testInherit_secondary_ctor_wargs() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/inheritance/inherit_secondary_ctor_wargs.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/init_get_set")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Init_get_set extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInInit_get_set() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/init_get_set"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("init_section.kt")
            public void testInit_section() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/init_get_set/init_section.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/innerNested")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class InnerNested extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInInnerNested() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/innerNested"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("createNestedClass.kt")
            public void testCreateNestedClass() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/createNestedClass.kt");
            }

            @TestMetadata("createdNestedInOuterMember.kt")
            public void testCreatedNestedInOuterMember() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/createdNestedInOuterMember.kt");
            }

            @TestMetadata("extensionFun.kt")
            public void testExtensionFun() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/extensionFun.kt");
            }

            @TestMetadata("extensionToNested.kt")
            public void testExtensionToNested() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/extensionToNested.kt");
            }

            @TestMetadata("importNestedClass.kt")
            public void testImportNestedClass() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/importNestedClass.kt");
            }

            @TestMetadata("innerGeneric.kt")
            public void testInnerGeneric() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/innerGeneric.kt");
            }

            @TestMetadata("innerLabeledThis.kt")
            public void testInnerLabeledThis() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/innerLabeledThis.kt");
            }

            @TestMetadata("innerSimple.kt")
            public void testInnerSimple() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/innerSimple.kt");
            }

            @TestMetadata("kt3132.kt")
            public void testKt3132() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/kt3132.kt");
            }

            @TestMetadata("kt5363.kt")
            public void testKt5363() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/kt5363.kt");
            }

            @TestMetadata("kt6804.kt")
            public void testKt6804() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/kt6804.kt");
            }

            @TestMetadata("nestedClassInObject.kt")
            public void testNestedClassInObject() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/nestedClassInObject.kt");
            }

            @TestMetadata("nestedClassObject.kt")
            public void testNestedClassObject() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/nestedClassObject.kt");
            }

            @TestMetadata("nestedEnumConstant.kt")
            public void testNestedEnumConstant() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/nestedEnumConstant.kt");
            }

            @TestMetadata("nestedGeneric.kt")
            public void testNestedGeneric() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/nestedGeneric.kt");
            }

            @TestMetadata("nestedInPackage.kt")
            public void testNestedInPackage() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/nestedInPackage.kt");
            }

            @TestMetadata("nestedObjects.kt")
            public void testNestedObjects() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/nestedObjects.kt");
            }

            @TestMetadata("nestedSimple.kt")
            public void testNestedSimple() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/nestedSimple.kt");
            }

            @TestMetadata("passingOuterRef.kt")
            public void testPassingOuterRef() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/innerNested/passingOuterRef.kt");
            }

            @TestMetadata("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall")
            @TestDataPath("$PROJECT_ROOT")
            @RunWith(JUnit3RunnerWithInners.class)
            public static class SuperConstructorCall extends AbstractIrDecompilerBlackBoxTest {
                private void runTest(String testDataFilePath) throws Exception {
                    KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
                }

                public void testAllFilesPresentInSuperConstructorCall() throws Exception {
                    KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
                }

                @TestMetadata("deepInnerHierarchy.kt")
                public void testDeepInnerHierarchy() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/deepInnerHierarchy.kt");
                }

                @TestMetadata("deepLocalHierarchy.kt")
                public void testDeepLocalHierarchy() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/deepLocalHierarchy.kt");
                }

                @TestMetadata("innerExtendsInnerViaSecondaryConstuctor.kt")
                public void testInnerExtendsInnerViaSecondaryConstuctor() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/innerExtendsInnerViaSecondaryConstuctor.kt");
                }

                @TestMetadata("innerExtendsInnerWithProperOuterCapture.kt")
                public void testInnerExtendsInnerWithProperOuterCapture() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/innerExtendsInnerWithProperOuterCapture.kt");
                }

                @TestMetadata("innerExtendsOuter.kt")
                public void testInnerExtendsOuter() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/innerExtendsOuter.kt");
                }

                @TestMetadata("kt11833_1.kt")
                public void testKt11833_1() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/kt11833_1.kt");
                }

                @TestMetadata("kt11833_2.kt")
                public void testKt11833_2() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/kt11833_2.kt");
                }

                @TestMetadata("localExtendsInner.kt")
                public void testLocalExtendsInner() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/localExtendsInner.kt");
                }

                @TestMetadata("localExtendsLocalWithClosure.kt")
                public void testLocalExtendsLocalWithClosure() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/localExtendsLocalWithClosure.kt");
                }

                @TestMetadata("localWithClosureExtendsLocalWithClosure.kt")
                public void testLocalWithClosureExtendsLocalWithClosure() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/localWithClosureExtendsLocalWithClosure.kt");
                }

                @TestMetadata("objectExtendsClassDefaultArgument.kt")
                public void testObjectExtendsClassDefaultArgument() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsClassDefaultArgument.kt");
                }

                @TestMetadata("objectExtendsClassVararg.kt")
                public void testObjectExtendsClassVararg() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsClassVararg.kt");
                }

                @TestMetadata("objectExtendsInner.kt")
                public void testObjectExtendsInner() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsInner.kt");
                }

                @TestMetadata("objectExtendsInnerDefaultArgument.kt")
                public void testObjectExtendsInnerDefaultArgument() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsInnerDefaultArgument.kt");
                }

                @TestMetadata("objectExtendsInnerOfLocalVarargAndDefault.kt")
                public void testObjectExtendsInnerOfLocalVarargAndDefault() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsInnerOfLocalVarargAndDefault.kt");
                }

                @TestMetadata("objectExtendsInnerOfLocalWithCapture.kt")
                public void testObjectExtendsInnerOfLocalWithCapture() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsInnerOfLocalWithCapture.kt");
                }

                @TestMetadata("objectExtendsLocalCaptureInSuperCall.kt")
                public void testObjectExtendsLocalCaptureInSuperCall() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsLocalCaptureInSuperCall.kt");
                }

                @TestMetadata("objectExtendsLocalWithClosure.kt")
                public void testObjectExtendsLocalWithClosure() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsLocalWithClosure.kt");
                }

                @TestMetadata("objectExtendsLocal_kt16858.kt")
                public void testObjectExtendsLocal_kt16858() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectExtendsLocal_kt16858.kt");
                }

                @TestMetadata("objectOuterDiffersFromInnerOuter.kt")
                public void testObjectOuterDiffersFromInnerOuter() throws Exception {
                    runTest("compiler/testData/decompiler/box/classes/innerNested/superConstructorCall/objectOuterDiffersFromInnerOuter.kt");
                }
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/interface_implement")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Interface_implement extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInInterface_implement() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/interface_implement"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("multiple_implement.kt")
            public void testMultiple_implement() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/interface_implement/multiple_implement.kt");
            }

            @TestMetadata("simple_implement.kt")
            public void testSimple_implement() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/interface_implement/simple_implement.kt");
            }
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/delegatedProperty")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class DelegatedProperty extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        @TestMetadata("accessTopLevelDelegatedPropertyInClinit.kt")
        public void testAccessTopLevelDelegatedPropertyInClinit() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/accessTopLevelDelegatedPropertyInClinit.kt");
        }

        public void testAllFilesPresentInDelegatedProperty() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/delegatedProperty"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("capturePropertyInClosure.kt")
        public void testCapturePropertyInClosure() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/capturePropertyInClosure.kt");
        }

        @TestMetadata("castGetReturnType.kt")
        public void testCastGetReturnType() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/castGetReturnType.kt");
        }

        @TestMetadata("castSetParameter.kt")
        public void testCastSetParameter() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/castSetParameter.kt");
        }

        @TestMetadata("delegateAsInnerClass.kt")
        public void testDelegateAsInnerClass() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/delegateAsInnerClass.kt");
        }

        @TestMetadata("delegateByOtherProperty.kt")
        public void testDelegateByOtherProperty() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/delegateByOtherProperty.kt");
        }

        @TestMetadata("delegateByTopLevelFun.kt")
        public void testDelegateByTopLevelFun() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/delegateByTopLevelFun.kt");
        }

        @TestMetadata("delegateByTopLevelProperty.kt")
        public void testDelegateByTopLevelProperty() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/delegateByTopLevelProperty.kt");
        }

        @TestMetadata("delegateForExtProperty.kt")
        public void testDelegateForExtProperty() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/delegateForExtProperty.kt");
        }

        @TestMetadata("delegateForExtPropertyInClass.kt")
        public void testDelegateForExtPropertyInClass() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/delegateForExtPropertyInClass.kt");
        }

        @TestMetadata("delegateWithPrivateSet.kt")
        public void testDelegateWithPrivateSet() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/delegateWithPrivateSet.kt");
        }

        @TestMetadata("extensionDelegatesWithSameNames.kt")
        public void testExtensionDelegatesWithSameNames() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/extensionDelegatesWithSameNames.kt");
        }

        @TestMetadata("extensionPropertyAndExtensionGetValue.kt")
        public void testExtensionPropertyAndExtensionGetValue() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/extensionPropertyAndExtensionGetValue.kt");
        }

        @TestMetadata("genericDelegate.kt")
        public void testGenericDelegate() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/genericDelegate.kt");
        }

        @TestMetadata("genericDelegateUncheckedCast1.kt")
        public void testGenericDelegateUncheckedCast1() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/genericDelegateUncheckedCast1.kt");
        }

        @TestMetadata("genericDelegateUncheckedCast2.kt")
        public void testGenericDelegateUncheckedCast2() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/genericDelegateUncheckedCast2.kt");
        }

        @TestMetadata("genericSetValueViaSyntheticAccessor.kt")
        public void testGenericSetValueViaSyntheticAccessor() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/genericSetValueViaSyntheticAccessor.kt");
        }

        @TestMetadata("getAsExtensionFun.kt")
        public void testGetAsExtensionFun() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/getAsExtensionFun.kt");
        }

        @TestMetadata("getAsExtensionFunInClass.kt")
        public void testGetAsExtensionFunInClass() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/getAsExtensionFunInClass.kt");
        }

        @TestMetadata("getDelegateWithoutReflection.kt")
        public void testGetDelegateWithoutReflection() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/getDelegateWithoutReflection.kt");
        }

        @TestMetadata("inClassVal.kt")
        public void testInClassVal() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/inClassVal.kt");
        }

        @TestMetadata("inClassVar.kt")
        public void testInClassVar() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/inClassVar.kt");
        }

        @TestMetadata("inTrait.kt")
        public void testInTrait() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/inTrait.kt");
        }

        @TestMetadata("inferredPropertyType.kt")
        public void testInferredPropertyType() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/inferredPropertyType.kt");
        }

        @TestMetadata("insideInlinedObjectMultiModule.kt")
        public void testInsideInlinedObjectMultiModule() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/insideInlinedObjectMultiModule.kt");
        }

        @TestMetadata("kt4138.kt")
        public void testKt4138() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/kt4138.kt");
        }

        @TestMetadata("kt6722.kt")
        public void testKt6722() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/kt6722.kt");
        }

        @TestMetadata("kt9712.kt")
        public void testKt9712() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/kt9712.kt");
        }

        @TestMetadata("privateSetterKPropertyIsNotMutable.kt")
        public void testPrivateSetterKPropertyIsNotMutable() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/privateSetterKPropertyIsNotMutable.kt");
        }

        @TestMetadata("privateVar.kt")
        public void testPrivateVar() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/privateVar.kt");
        }

        @TestMetadata("propertyMetadataShouldBeCached.kt")
        public void testPropertyMetadataShouldBeCached() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/propertyMetadataShouldBeCached.kt");
        }

        @TestMetadata("protectedVarWithPrivateSet.kt")
        public void testProtectedVarWithPrivateSet() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/protectedVarWithPrivateSet.kt");
        }

        @TestMetadata("setAsExtensionFun.kt")
        public void testSetAsExtensionFun() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/setAsExtensionFun.kt");
        }

        @TestMetadata("setAsExtensionFunInClass.kt")
        public void testSetAsExtensionFunInClass() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/setAsExtensionFunInClass.kt");
        }

        @TestMetadata("stackOverflowOnCallFromGetValue.kt")
        public void testStackOverflowOnCallFromGetValue() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/stackOverflowOnCallFromGetValue.kt");
        }

        @TestMetadata("topLevelVal.kt")
        public void testTopLevelVal() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/topLevelVal.kt");
        }

        @TestMetadata("topLevelVar.kt")
        public void testTopLevelVar() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/topLevelVar.kt");
        }

        @TestMetadata("twoPropByOneDelegete.kt")
        public void testTwoPropByOneDelegete() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/twoPropByOneDelegete.kt");
        }

        @TestMetadata("useKPropertyLater.kt")
        public void testUseKPropertyLater() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/useKPropertyLater.kt");
        }

        @TestMetadata("useReflectionOnKProperty.kt")
        public void testUseReflectionOnKProperty() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/useReflectionOnKProperty.kt");
        }

        @TestMetadata("valInInnerClass.kt")
        public void testValInInnerClass() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/valInInnerClass.kt");
        }

        @TestMetadata("varInInnerClass.kt")
        public void testVarInInnerClass() throws Exception {
            runTest("compiler/testData/decompiler/box/delegatedProperty/varInInnerClass.kt");
        }

        @TestMetadata("compiler/testData/decompiler/box/delegatedProperty/local")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Local extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInLocal() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/delegatedProperty/local"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("capturedLocalVal.kt")
            public void testCapturedLocalVal() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/capturedLocalVal.kt");
            }

            @TestMetadata("capturedLocalValNoInline.kt")
            public void testCapturedLocalValNoInline() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/capturedLocalValNoInline.kt");
            }

            @TestMetadata("capturedLocalVar.kt")
            public void testCapturedLocalVar() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/capturedLocalVar.kt");
            }

            @TestMetadata("capturedLocalVarNoInline.kt")
            public void testCapturedLocalVarNoInline() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/capturedLocalVarNoInline.kt");
            }

            @TestMetadata("inlineGetValue.kt")
            public void testInlineGetValue() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/inlineGetValue.kt");
            }

            @TestMetadata("inlineOperators.kt")
            public void testInlineOperators() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/inlineOperators.kt");
            }

            @TestMetadata("kt12891.kt")
            public void testKt12891() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/kt12891.kt");
            }

            @TestMetadata("kt13557.kt")
            public void testKt13557() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/kt13557.kt");
            }

            @TestMetadata("kt16864.kt")
            public void testKt16864() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/kt16864.kt");
            }

            @TestMetadata("kt19690.kt")
            public void testKt19690() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/kt19690.kt");
            }

            @TestMetadata("kt21085.kt")
            public void testKt21085() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/kt21085.kt");
            }

            @TestMetadata("kt23117.kt")
            public void testKt23117() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/kt23117.kt");
            }

            @TestMetadata("localVal.kt")
            public void testLocalVal() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/localVal.kt");
            }

            @TestMetadata("localValNoExplicitType.kt")
            public void testLocalValNoExplicitType() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/localValNoExplicitType.kt");
            }

            @TestMetadata("localVar.kt")
            public void testLocalVar() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/localVar.kt");
            }

            @TestMetadata("localVarNoExplicitType.kt")
            public void testLocalVarNoExplicitType() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/local/localVarNoExplicitType.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/delegatedProperty/provideDelegate")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class ProvideDelegate extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInProvideDelegate() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/delegatedProperty/provideDelegate"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("differentReceivers.kt")
            public void testDifferentReceivers() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/differentReceivers.kt");
            }

            @TestMetadata("evaluationOrder.kt")
            public void testEvaluationOrder() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/evaluationOrder.kt");
            }

            @TestMetadata("evaluationOrderVar.kt")
            public void testEvaluationOrderVar() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/evaluationOrderVar.kt");
            }

            @TestMetadata("extensionDelegated.kt")
            public void testExtensionDelegated() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/extensionDelegated.kt");
            }

            @TestMetadata("generic.kt")
            public void testGeneric() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/generic.kt");
            }

            @TestMetadata("hostCheck.kt")
            public void testHostCheck() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/hostCheck.kt");
            }

            @TestMetadata("inClass.kt")
            public void testInClass() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/inClass.kt");
            }

            @TestMetadata("inlineProvideDelegate.kt")
            public void testInlineProvideDelegate() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/inlineProvideDelegate.kt");
            }

            @TestMetadata("jvmStaticInObject.kt")
            public void testJvmStaticInObject() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/jvmStaticInObject.kt");
            }

            @TestMetadata("kt15437.kt")
            public void testKt15437() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/kt15437.kt");
            }

            @TestMetadata("kt16441.kt")
            public void testKt16441() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/kt16441.kt");
            }

            @TestMetadata("kt18902.kt")
            public void testKt18902() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/kt18902.kt");
            }

            @TestMetadata("local.kt")
            public void testLocal() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/local.kt");
            }

            @TestMetadata("localCaptured.kt")
            public void testLocalCaptured() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/localCaptured.kt");
            }

            @TestMetadata("localDifferentReceivers.kt")
            public void testLocalDifferentReceivers() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/localDifferentReceivers.kt");
            }

            @TestMetadata("memberExtension.kt")
            public void testMemberExtension() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/memberExtension.kt");
            }

            @TestMetadata("propertyMetadata.kt")
            public void testPropertyMetadata() throws Exception {
                runTest("compiler/testData/decompiler/box/delegatedProperty/provideDelegate/propertyMetadata.kt");
            }
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/delegation")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Delegation extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInDelegation() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/delegation"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("byMiddleInterface.kt")
        public void testByMiddleInterface() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/byMiddleInterface.kt");
        }

        @TestMetadata("byMiddleInterface.decompiled.kt")
        public void testByMiddleInterface_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/byMiddleInterface.decompiled.kt");
        }

        @TestMetadata("defaultOverride.kt")
        public void testDefaultOverride() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/defaultOverride.kt");
        }

        @TestMetadata("defaultOverride.decompiled.kt")
        public void testDefaultOverride_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/defaultOverride.decompiled.kt");
        }

        @TestMetadata("delegationWithPrivateConstructor.kt")
        public void testDelegationWithPrivateConstructor() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/delegationWithPrivateConstructor.kt");
        }

        @TestMetadata("delegationWithPrivateConstructor.decompiled.kt")
        public void testDelegationWithPrivateConstructor_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/delegationWithPrivateConstructor.decompiled.kt");
        }

        @TestMetadata("diamond.kt")
        public void testDiamond() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/diamond.kt");
        }

        @TestMetadata("diamond.decompiled.kt")
        public void testDiamond_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/diamond.decompiled.kt");
        }

        @TestMetadata("fromReference.kt")
        public void testFromReference() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/fromReference.kt");
        }

        @TestMetadata("hiddenSuperOverrideIn1.0.kt")
        public void testHiddenSuperOverrideIn1_0() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/hiddenSuperOverrideIn1.0.kt");
        }

        @TestMetadata("hiddenSuperOverrideIn1.0.decompiled.kt")
        public void testHiddenSuperOverrideIn1_0_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/hiddenSuperOverrideIn1.0.decompiled.kt");
        }

        @TestMetadata("inClassDeclaration.kt")
        public void testInClassDeclaration() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/inClassDeclaration.kt");
        }

        @TestMetadata("kt8154.kt")
        public void testKt8154() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/kt8154.kt");
        }

        @TestMetadata("kt8154.decompiled.kt")
        public void testKt8154_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/kt8154.decompiled.kt");
        }

        @TestMetadata("mixed.kt")
        public void testMixed() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/mixed.kt");
        }

        @TestMetadata("simple.kt")
        public void testSimple() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/simple.kt");
        }

        @TestMetadata("simple.decompiled.kt")
        public void testSimple_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/simple.decompiled.kt");
        }

        @TestMetadata("withDefaultParameters.kt")
        public void testWithDefaultParameters() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/withDefaultParameters.kt");
        }

        @TestMetadata("withDefaultParameters.decompiled.kt")
        public void testWithDefaultParameters_decompiled() throws Exception {
            runTest("compiler/testData/decompiler/box/delegation/withDefaultParameters.decompiled.kt");
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/expressions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Expressions extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInExpressions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/if")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class If extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInIf() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/if"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("if_else_if.kt")
            public void testIf_else_if() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_else_if.kt");
            }

            @TestMetadata("if_four_conditions.kt")
            public void testIf_four_conditions() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_four_conditions.kt");
            }

            @TestMetadata("if_simple.kt")
            public void testIf_simple() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_simple.kt");
            }

            @TestMetadata("if_simple_return.kt")
            public void testIf_simple_return() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_simple_return.kt");
            }

            @TestMetadata("if_three_conditions.kt")
            public void testIf_three_conditions() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_three_conditions.kt");
            }

            @TestMetadata("if_two_conditions.kt")
            public void testIf_two_conditions() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_two_conditions.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/loop")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Loop extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInLoop() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/loop"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("loops.kt")
            public void testLoops() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/loop/loops.kt");
            }

            @TestMetadata("loops_break_continue.kt")
            public void testLoops_break_continue() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/loop/loops_break_continue.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/other")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Other extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInOther() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/other"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("custom_package.kt")
            public void testCustom_package() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/other/custom_package.kt");
            }

            @TestMetadata("typealias.kt")
            public void testTypealias() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/other/typealias.kt");
            }

            @TestMetadata("typealias_nullability.kt")
            public void testTypealias_nullability() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/other/typealias_nullability.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/try_catch")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Try_catch extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInTry_catch() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/try_catch"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("return_try_catch.kt")
            public void testReturn_try_catch() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/try_catch/return_try_catch.kt");
            }

            @TestMetadata("try_catch.kt")
            public void testTry_catch() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/try_catch/try_catch.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/when")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class When extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInWhen() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/when"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("when_is.kt")
            public void testWhen_is() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/when/when_is.kt");
            }
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/functions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Functions extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInFunctions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/functions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("default_named_args.kt")
        public void testDefault_named_args() throws Exception {
            runTest("compiler/testData/decompiler/box/functions/default_named_args.kt");
        }

        @TestMetadata("compiler/testData/decompiler/box/functions/higher_order")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Higher_order extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInHigher_order() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/functions/higher_order"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("apply_usage.kt")
            public void testApply_usage() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/higher_order/apply_usage.kt");
            }

            @TestMetadata("apply_usage.decompiled.kt")
            public void testApply_usage_decompiled() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/higher_order/apply_usage.decompiled.kt");
            }

            @TestMetadata("custom_lambda_arg_fun.kt")
            public void testCustom_lambda_arg_fun() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/higher_order/custom_lambda_arg_fun.kt");
            }

            @TestMetadata("lambda_arg_invokation.kt")
            public void testLambda_arg_invokation() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/higher_order/lambda_arg_invokation.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/functions/simple")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Simple extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInSimple() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/functions/simple"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("fibonacci.kt")
            public void testFibonacci() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/simple/fibonacci.kt");
            }

            @TestMetadata("fun_invokation.kt")
            public void testFun_invokation() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/simple/fun_invokation.kt");
            }

            @TestMetadata("fun_recursion.kt")
            public void testFun_recursion() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/simple/fun_recursion.kt");
            }

            @TestMetadata("simpleOperators.kt")
            public void testSimpleOperators() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/simple/simpleOperators.kt");
            }
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/generics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Generics extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInGenerics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/generics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("custom_gen_class.kt")
        public void testCustom_gen_class() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/custom_gen_class.kt");
        }

        @TestMetadata("decl_site_variance_in.kt")
        public void testDecl_site_variance_in() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/decl_site_variance_in.kt");
        }

        @TestMetadata("decl_site_variance_out.kt")
        public void testDecl_site_variance_out() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/decl_site_variance_out.kt");
        }

        @TestMetadata("invoke_generic_fun.kt")
        public void testInvoke_generic_fun() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/invoke_generic_fun.kt");
        }

        @TestMetadata("upper_bound_fun.kt")
        public void testUpper_bound_fun() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/upper_bound_fun.kt");
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/objects")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Objects extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInObjects() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/objects"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classCallsProtectedInheritedByCompanion.kt")
        public void testClassCallsProtectedInheritedByCompanion() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/classCallsProtectedInheritedByCompanion.kt");
        }

        @TestMetadata("classCompanion.kt")
        public void testClassCompanion() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/classCompanion.kt");
        }

        @TestMetadata("kt2398.kt")
        public void testKt2398() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/kt2398.kt");
        }

        @TestMetadata("kt2675.kt")
        public void testKt2675() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/kt2675.kt");
        }

        @TestMetadata("kt9642.kt")
        public void testKt9642() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/kt9642.kt");
        }

        @TestMetadata("methodOnObject.kt")
        public void testMethodOnObject() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/methodOnObject.kt");
        }

        @TestMetadata("nestedDerivedClassCallsProtectedFromCompanion.kt")
        public void testNestedDerivedClassCallsProtectedFromCompanion() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/nestedDerivedClassCallsProtectedFromCompanion.kt");
        }

        @TestMetadata("nestedObjectWithSuperclass.kt")
        public void testNestedObjectWithSuperclass() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/nestedObjectWithSuperclass.kt");
        }

        @TestMetadata("object.kt")
        public void testObject() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/object.kt");
        }

        @TestMetadata("objectInitialization_kt5523.kt")
        public void testObjectInitialization_kt5523() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/objectInitialization_kt5523.kt");
        }

        @TestMetadata("objectWithSuperclass.kt")
        public void testObjectWithSuperclass() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/objectWithSuperclass.kt");
        }

        @TestMetadata("objectWithSuperclassAndTrait.kt")
        public void testObjectWithSuperclassAndTrait() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/objectWithSuperclassAndTrait.kt");
        }

        @TestMetadata("simpleObject.kt")
        public void testSimpleObject() throws Exception {
            runTest("compiler/testData/decompiler/box/objects/simpleObject.kt");
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/varargs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Varargs extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInVarargs() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/varargs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("different_varargs.kt")
        public void testDifferent_varargs() throws Exception {
            runTest("compiler/testData/decompiler/box/varargs/different_varargs.kt");
        }
    }
}
