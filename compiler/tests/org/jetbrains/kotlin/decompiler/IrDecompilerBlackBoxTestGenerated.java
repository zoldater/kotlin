/*
 * Copyright 2010-2019 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlin.decompiler;

import com.intellij.testFramework.TestDataPath;
import org.jetbrains.kotlin.test.JUnit3RunnerWithInners;
import org.jetbrains.kotlin.test.KotlinTestUtils;
import org.jetbrains.kotlin.test.TargetBackend;
import org.jetbrains.kotlin.test.TestMetadata;
import org.junit.runner.RunWith;

import java.io.File;
import java.util.regex.Pattern;

/** This class is generated by {@link org.jetbrains.kotlin.generators.tests.TestsPackage}. DO NOT MODIFY MANUALLY */
@SuppressWarnings("all")
@TestMetadata("compiler/testData/decompiler/box")
@TestDataPath("$PROJECT_ROOT")
@RunWith(JUnit3RunnerWithInners.class)
public class IrDecompilerBlackBoxTestGenerated extends AbstractIrDecompilerBlackBoxTest {
    private void runTest(String testDataFilePath) throws Exception {
        KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
    }

    public void testAllFilesPresentInBox() throws Exception {
        KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
    }

    @TestMetadata("dummy.kt")
    public void testDummy() throws Exception {
        runTest("compiler/testData/decompiler/box/dummy.kt");
    }

    @TestMetadata("compiler/testData/decompiler/box/classes")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Classes extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInClasses() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("classes_simple.kt")
        public void testClasses_simple() throws Exception {
            runTest("compiler/testData/decompiler/box/classes/classes_simple.kt");
        }

        @TestMetadata("enum_test.kt")
        public void testEnum_test() throws Exception {
            runTest("compiler/testData/decompiler/box/classes/enum_test.kt");
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/ctor")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Ctor extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInCtor() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/ctor"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("default_param_ctor.kt")
            public void testDefault_param_ctor() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/ctor/default_param_ctor.kt");
            }

            @TestMetadata("instance_ctor.kt")
            public void testInstance_ctor() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/ctor/instance_ctor.kt");
            }

            @TestMetadata("instance_different_ctors.kt")
            public void testInstance_different_ctors() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/ctor/instance_different_ctors.kt");
            }

            @TestMetadata("named_params_ctor.kt")
            public void testNamed_params_ctor() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/ctor/named_params_ctor.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/data_class")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Data_class extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInData_class() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/data_class"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("data_class.kt")
            public void testData_class() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/data_class/data_class.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/delegating_calls")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Delegating_calls extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInDelegating_calls() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/delegating_calls"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("super_this_calls.kt")
            public void testSuper_this_calls() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/delegating_calls/super_this_calls.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/extension")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Extension extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInExtension() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/extension"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("custom_type_extension.kt")
            public void testCustom_type_extension() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/extension/custom_type_extension.kt");
            }

            @TestMetadata("kt_type_extension.kt")
            public void testKt_type_extension() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/extension/kt_type_extension.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/inheritance")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Inheritance extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInInheritance() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/inheritance"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("inherit_and_implement.kt")
            public void testInherit_and_implement() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/inheritance/inherit_and_implement.kt");
            }

            @TestMetadata("inherit_primary_ctor_noargs.kt")
            public void testInherit_primary_ctor_noargs() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/inheritance/inherit_primary_ctor_noargs.kt");
            }

            @TestMetadata("inherit_primary_ctor_wargs.kt")
            public void testInherit_primary_ctor_wargs() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/inheritance/inherit_primary_ctor_wargs.kt");
            }

            @TestMetadata("inherit_secondary_ctor_wargs.kt")
            public void testInherit_secondary_ctor_wargs() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/inheritance/inherit_secondary_ctor_wargs.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/init_get_set")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Init_get_set extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInInit_get_set() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/init_get_set"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("init_section.kt")
            public void testInit_section() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/init_get_set/init_section.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/classes/interface_implement")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Interface_implement extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInInterface_implement() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/classes/interface_implement"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("multiple_implement.kt")
            public void testMultiple_implement() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/interface_implement/multiple_implement.kt");
            }

            @TestMetadata("simple_implement.kt")
            public void testSimple_implement() throws Exception {
                runTest("compiler/testData/decompiler/box/classes/interface_implement/simple_implement.kt");
            }
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/expressions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Expressions extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInExpressions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/if")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class If extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInIf() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/if"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("if_else_if.kt")
            public void testIf_else_if() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_else_if.kt");
            }

            @TestMetadata("if_four_conditions.kt")
            public void testIf_four_conditions() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_four_conditions.kt");
            }

            @TestMetadata("if_simple.kt")
            public void testIf_simple() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_simple.kt");
            }

            @TestMetadata("if_simple_return.kt")
            public void testIf_simple_return() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_simple_return.kt");
            }

            @TestMetadata("if_three_conditions.kt")
            public void testIf_three_conditions() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_three_conditions.kt");
            }

            @TestMetadata("if_two_conditions.kt")
            public void testIf_two_conditions() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/if/if_two_conditions.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/loop")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Loop extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInLoop() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/loop"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("loops.kt")
            public void testLoops() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/loop/loops.kt");
            }

            @TestMetadata("loops_break_continue.kt")
            public void testLoops_break_continue() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/loop/loops_break_continue.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/other")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Other extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInOther() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/other"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("custom_package.kt")
            public void testCustom_package() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/other/custom_package.kt");
            }

            @TestMetadata("typealias.kt")
            public void testTypealias() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/other/typealias.kt");
            }

            @TestMetadata("typealias_nullability.kt")
            public void testTypealias_nullability() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/other/typealias_nullability.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/try_catch")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Try_catch extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInTry_catch() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/try_catch"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("return_try_catch.kt")
            public void testReturn_try_catch() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/try_catch/return_try_catch.kt");
            }

            @TestMetadata("try_catch.kt")
            public void testTry_catch() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/try_catch/try_catch.kt");
            }
        }

        @TestMetadata("compiler/testData/decompiler/box/expressions/when")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class When extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInWhen() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/expressions/when"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("when_is.kt")
            public void testWhen_is() throws Exception {
                runTest("compiler/testData/decompiler/box/expressions/when/when_is.kt");
            }
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/functions")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Functions extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInFunctions() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/functions"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("default_named_args.kt")
        public void testDefault_named_args() throws Exception {
            runTest("compiler/testData/decompiler/box/functions/default_named_args.kt");
        }

        @TestMetadata("compiler/testData/decompiler/box/functions/simple")
        @TestDataPath("$PROJECT_ROOT")
        @RunWith(JUnit3RunnerWithInners.class)
        public static class Simple extends AbstractIrDecompilerBlackBoxTest {
            private void runTest(String testDataFilePath) throws Exception {
                KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
            }

            public void testAllFilesPresentInSimple() throws Exception {
                KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/functions/simple"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
            }

            @TestMetadata("fibonacci.kt")
            public void testFibonacci() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/simple/fibonacci.kt");
            }

            @TestMetadata("fun_invokation.kt")
            public void testFun_invokation() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/simple/fun_invokation.kt");
            }

            @TestMetadata("fun_recursion.kt")
            public void testFun_recursion() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/simple/fun_recursion.kt");
            }

            @TestMetadata("simpleOperators.kt")
            public void testSimpleOperators() throws Exception {
                runTest("compiler/testData/decompiler/box/functions/simple/simpleOperators.kt");
            }
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/generics")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Generics extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInGenerics() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/generics"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("custom_gen_class.kt")
        public void testCustom_gen_class() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/custom_gen_class.kt");
        }

        @TestMetadata("decl_site_variance_in.kt")
        public void testDecl_site_variance_in() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/decl_site_variance_in.kt");
        }

        @TestMetadata("decl_site_variance_out.kt")
        public void testDecl_site_variance_out() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/decl_site_variance_out.kt");
        }

        @TestMetadata("invoke_generic_fun.kt")
        public void testInvoke_generic_fun() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/invoke_generic_fun.kt");
        }

        @TestMetadata("upper_bound_fun.kt")
        public void testUpper_bound_fun() throws Exception {
            runTest("compiler/testData/decompiler/box/generics/upper_bound_fun.kt");
        }
    }

    @TestMetadata("compiler/testData/decompiler/box/varargs")
    @TestDataPath("$PROJECT_ROOT")
    @RunWith(JUnit3RunnerWithInners.class)
    public static class Varargs extends AbstractIrDecompilerBlackBoxTest {
        private void runTest(String testDataFilePath) throws Exception {
            KotlinTestUtils.runTest(this::doTest, TargetBackend.ANY, testDataFilePath);
        }

        public void testAllFilesPresentInVarargs() throws Exception {
            KotlinTestUtils.assertAllTestsPresentByMetadata(this.getClass(), new File("compiler/testData/decompiler/box/varargs"), Pattern.compile("^(.+)\\.kt$"), TargetBackend.ANY, true);
        }

        @TestMetadata("different_varargs.kt")
        public void testDifferent_varargs() throws Exception {
            runTest("compiler/testData/decompiler/box/varargs/different_varargs.kt");
        }
    }
}
