// FILE: /customClassExtension.kt

class Clazz(final val x: Int) {
}

fun Clazz.isLessThenTwo(): Boolean {
    return this.x < 2
}

val Clazz.isPositive: Boolean
    get() = this.x > 0


fun box(): String {
    val funClazz = Clazz(0)
    val callExtResult = funClazz.isLessThenTwo()
    val classRef : (Clazz) -> Boolean = Clazz::isLessThenTwo
    val callRefResult = classRef(funClazz)
    val instanceRef : () -> Boolean = funClazz::isLessThenTwo
    val instanceRefResult = instanceRef()
    val propClazz = Clazz(2)
    val extPropResult = propClazz.isPositive
    val classPropRef : (Clazz) -> Boolean = Clazz::isPositive
    val extPropRefResult = classPropRef(propClazz)
    val instancePropRef : () -> Boolean = propClazz::isPositive
    val instancePropRefResult = instancePropRef()
    return if (callExtResult && callRefResult && instanceRefResult && extPropResult && extPropRefResult && instancePropRefResult) {
        "OK"
    } else {
        "FAIL"
    }
}
