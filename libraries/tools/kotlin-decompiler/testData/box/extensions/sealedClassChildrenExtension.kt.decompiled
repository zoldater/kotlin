// FILE: /sealedClassChildrenExtension.kt

sealed class Clazz(final val x: Int) {
    object ClazzZero : Clazz(0)
    object ClazzTwo : Clazz(2)
}

fun <T : Clazz> T.isLessThenTwo(): Boolean {
    return this.x < 2
}

val <T : Clazz> T.isPositive: Boolean
    get() = this.x > 0


fun box(): String {
    val callExtResult = Clazz.ClazzZero.isLessThenTwo<Clazz.ClazzZero>()
    val classRef : (Clazz) -> Boolean = Clazz::isLessThenTwo
    val callRefResult = classRef(Clazz.ClazzZero)
    val objectRef : () -> Boolean = Clazz.ClazzZero::isLessThenTwo
    val objectRefResult = objectRef()
    val extPropResult = Clazz.ClazzTwo.isPositive
    val classPropRef : (Clazz) -> Boolean = Clazz::isPositive
    val extPropRefResult = classPropRef(Clazz.ClazzTwo)
    val objectPropRef : () -> Boolean = Clazz.ClazzTwo::isPositive
    val objPropRefResult = objectPropRef()
    return if (callExtResult && callRefResult && objectRefResult && extPropResult && extPropRefResult && objPropRefResult) {
        "OK"
    } else {
        "FAIL"
    }
}
