// FILE: /cases110720.kt

interface Base {
    fun getValue(): String
    open fun test(): String {
        return this.getValue()
    }
}

interface Foo : Base {
    fun foo()
}

interface Bar {
    abstract val x: Int
    fun bar()
}

val barImpl: Bar = object : Bar {
    open override val x: Int = 1
    override fun bar() {}
}


class Fail() : Base {
    override fun getValue(): String {
        return "OK"
    }
}

class Derived() : Base by Fail(), Foo, Bar by barImpl {
    override fun foo() {}
}

fun box(): String {
    return Derived().test()
}
